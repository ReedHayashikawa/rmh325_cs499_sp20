Reed Hayashikawa

Assignment 3: Symbolic Execution

Due Date: 4/20/20

Section: 499 Spring 2020

Link: https://programiz.com/c-programming/examples/sum-prime-numbers

												Results

	The function I found online takes in user input as arguments in the command line. It then reads in the keyboard input, and takes on two integers, sums the two integers, and check to see if the sum is a prime number. 

	I first run a AFL dummy test with one seed input file that is "correct" for the program. After executing the command: afl-fuzz -n -i ./seeds/ -o ./results/ ./afl_function and running the fuzzer for 15 minutes, the overall results consisted of 285 cycles done, 1 total paths, and 0 uniq crashes. Being that the fuzzer needs to go over all the test cases discovered, fuzz each one, and loop back to the beginning I felt this was a good amount to base my evaluation. I also noticed that the fuzzer reported 200+ uniq hangs and 0 favored paths with 0 crashes. Thus, the fuzzer found 0 paths that it considers to be minimal in terms of algorithm. There was a total of 20.0k timeouts with 500+ of those being unique and 0 new edges.The total executions were 45.0k and the speed calculated at around 47.00/sec which is very slow in terms of execution.
	
	I then proceed to run the same AFL in regular mode consisting of 3 seeds. 2 out the 3 seeds are "correct". After executing the command: afl-fuzz -i ./seeds -o ./results ./afl_function and running the fuzzer for 15 minutes there exists 15 total paths, 0 uniq crashes and 4 uniq hangs. There were 1 favored paths that it considers to be minimal in terms of algorithm and 48.3k total executions. There was a total of 40.2k timeouts with 2 of those being unique, 0 crashes and 1 new edge. The stability was calculated at 100% and I also noticed the cpu000 maintained consistent throughout runtime around 280% which is extremely high and highlighted red throughout execution.
	
	I then proceeded to run the command: ./libfuzzer_sum_of_two_prime in order to test my function using libfuzzer. The fuzzer generated a seed and loaded 1 module and 1 PC tables. I did not provide a maximum length, thus the program will not generate inputs larger than 4096 bytes by default. It discovered 7 inputs of 239 bytes total (7/239b) that cover 3 coverage points. After 934811 inputs I interrupted the fuzzer terminating its execution.
		
	I then proceeded to run the command: ./libfuzzer_sum_of_two_prime ./seeds/ -max=len=256 -runs=60000 in order to test my function using libfuzzer at a given max input length and runs. The fuzzer generated a seed and loaded 1 module and 1 PC tables. It ran my program with 3 seeds with one of the seeds being incorrect. I did provide a max input length of 256 and a thresh of 60k runs before execution. It discovered 3 inputs of 259 bytes total (3/259b) that cover 3 coverage points. After 600000 inputs the process ended with the total time being 1 second.
	
	In order to execute deepstate using my C code, I checked to see which containers exists in my directory using the command: docker ps --all. I used the container listed under the id d48762407c05. I then run the deepstate on the image using the command sudo docker start. In addition, I use the command sudo docker stop, in order to terminate the test. After testing the code, the container had a memory usage of 1.58MiB and a limit of 950.0MiB on average. The mem % seemed to clock in around 14% on average with the NET I/O remaining consistent around 3.7kb and the BLOCK I/O being around 3MB. 

	Lastly, I wrote a DeepState harness for both fuzzing and symbolic execution. I was not able to run symexwins.cpp with symbolic execution on angr or manticore. However, I hypothesize that the fuzzingwins favors fuzzing while the symewins favors symex because the code is more realistic in the fuzzingwins.cpp.
 
	
	
	





	

    
